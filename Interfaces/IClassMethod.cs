////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	Interfaces\IClassMethod.cs
//
// summary:	Declares the IClassMethod interface
////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Rizvis.ClassBuilder.Interfaces
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for class element. </summary>
    ///
    /// <remarks>   Rizvi, 19/09/2020. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface IClassMethod
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Creates a method. </summary>
        ///
        /// <param name="name">     The name. </param>
        /// <param name="modifier"> The modifier. </param>
        ///
        /// <returns>   The new method. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        IClassMethod CreateMethod(string name, Modifier modifier);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   With arguments. </summary>
        ///
        /// <param name="args"> A variable-length parameters list containing arguments. </param>
        ///
        /// <returns>   An IClassMethod. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        IClassMethod WithArguments(params string[] args);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Converts this  to a void. </summary>
        ///
        /// <returns>   An IClassMethod. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        IClassMethod AsVoid();

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   With asynchronous. </summary>
        ///
        /// <returns>   An IClassMethod. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        IClassMethod WithAsync();

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Converts a type to a return with. </summary>
        ///
        /// <typeparam name="T">    Generic type parameter. </typeparam>
        /// <param name="type"> The type. </param>
        ///
        /// <returns>   An IClassMethod. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        IClassMethod AsReturnWithType<T>(T type);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Converts a type to a return with. </summary>
        ///
        /// <param name="type"> The type. </param>
        ///
        /// <returns>   An IClassMethod. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        IClassMethod AsReturnWith(string type);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Adds a method description. </summary>
        ///
        /// <param name="description">  The description. </param>
        ///
        /// <returns>   An IClassMethod. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        IClassMethod AddMethodDescription(string description);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Adds a code black. </summary>
        ///
        /// <param name="codeBlock">    The code block. </param>
        ///
        /// <returns>   An IClassMethod. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        IClassMethod AddCodeBlack(string codeBlock);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Converts this  to a static. </summary>
        ///
        /// <returns>   The IClass. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        IClassMethod AsStatic();

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Converts this  to a sealed. </summary>
        ///
        /// <returns>   The IClass. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        IClassMethod AsSealed();

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Converts this  to an abstract. </summary>
        ///
        /// <returns>   The IClass. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        IClassMethod AsAbstract();

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets the build. </summary>
        ///
        /// <returns>   An IClassMethod. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        IClassMethod Build();


    }
}
